---
import Layout from '../layouts/Layout.astro'
import Hero from '../components/blocks/hero/PageHeader.astro'
import CTA from '../components/blocks/CTA/BasicDark.astro'
import Section from '../components/ui/Section.astro'
import Row from '../components/ui/Row.astro'
import Col from '../components/ui/Col.astro'
import Button from '../components/ui/Button.astro'
import Card from '../components/ui/cards/partials/Card.astro'
import CardBody from '../components/ui/cards/partials/CardBody.astro'
import Testimonial from '../components/blocks/testimonials/BasicDark.astro'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import LogoWatermark from '../components/ui/LogoWatermark.astro'
import FilterButtons from '../components/ui/FilterButtons.astro'

// 导入水印图片
import eduGrowLogo from '../assets/logo_white.svg'

// - Testimonial background
import testimonialBackground from '../assets/testimonial-bg.webp'

// 从JSON文件导入数据
import casesByCountry from '../data/json-files/casesByCountry.json'

// 导入所有头像图片
const avatarImages = import.meta.glob<{ default: any }>('/src/assets/avatars/*.webp')

// 创建头像路径映射对象
const avatarMap: Record<string, any> = {}

// 填充映射对象
for (const [path, importFunc] of Object.entries(avatarImages)) {
  const importedImage = await importFunc()
  avatarMap[path] = importedImage.default
}

// 获取头像函数
function getAvatar(photoPath: string): any {
  if (avatarMap[photoPath]) {
    return avatarMap[photoPath]
  }
  // 如果找不到图片，返回第一个可用的图片（防止错误）
  return Object.values(avatarMap)[0]
}

const SEO = {
	title: '留学成功案例 | 予果予实（EDUGROW）',
	description:
		'浏览予果予实（EDUGROW）学员的真实留学成功案例，按美国、英国、澳大利亚、加拿大、新加坡、香港等热门留学目的地分类，了解不同背景学生的申请经历、录取院校及专业选择，为您的留学规划提供参考。',
}

const header = {
	title: '留学案例展示',
	text: '真实案例见证成长，予果予实百余位学员成功录取世界名校。按国家或专业分类，快速了解不同背景学子的升学路径与成果。'
}

// 提取所有专业分类
const getAllMajorCategories = (): string[] => {
	const categories = new Set<string>()
	Object.values(casesByCountry).forEach((cases) => {
		cases.forEach((item) => {
			if (item.major_category) {
				categories.add(item.major_category as string)
			}
		})
	})
	return Array.from(categories)
}

// 将所有案例合并到一个数组中，并添加country属性
const allCases = Object.entries(casesByCountry).flatMap(([country, cases]) =>
	cases.map((item) => ({
		...item,
		country // 添加country属性
	}))
)

const majorCategories = getAllMajorCategories()
---

<Layout title={SEO.title} description={SEO.description}>
	<Hero title={header.title} text={header.text} />
	<Section padding="both" classes="dark:bg-neutral-900">
		<Row>
			<Col span="12">
				<div class="mb-12">
					<div class="flex flex-col space-y-6">
						<!-- 国家过滤器 -->
						<FilterButtons
							title="按国家/地区筛选"
							iconName="fluent:globe-16-filled"
							filterType="country"
							items={Object.keys(casesByCountry)}
							isPrimary={true}
						/>

						<!-- 专业分类过滤器 -->
						<FilterButtons
							title="按专业类别筛选"
							iconName="fluent:book-16-filled"
							filterType="major"
							items={majorCategories}
							isPrimary={false}
						/>
					</div>
				</div>
			</Col>
		</Row>

		<!-- 案例展示区域 -->
		<div id="case-display">
			<Row classes="my-8">
				<Col span="12">
					<h2 id="filter-title" class="mb-8 text-center text-2xl font-bold">
						全部留学案例
					</h2>
				</Col>
			</Row>
			<Row>
				{
					allCases.map((item) => (
						<Col
							span="3"
							spanTablet="4"
							spanMobile="12"
							classes={`case-item ${item.country ? `data-country-${item.country}` : ''} ${item.major_category ? `data-major-${item.major_category}` : ''}`}
						>
							<Card classes="h-full bg-primary-50 hover:bg-primary-100 dark:bg-neutral-800 dark:hover:bg-neutral-700 hover:shadow-lg hover:shadow-neutral-700/10 dark:hover:shadow-neutral-950/20 transition-all duration-300 ease-out transform translate-y-0 scale-100 hover:-translate-y-2 hover:scale-[1.02]">
								<div class="relative flex h-full flex-col justify-between overflow-hidden p-6">
									{/* 头像与姓名在同一行，左对齐 */}
									<div class="mb-4 flex w-full items-center">
										{/* 学生头像 */}
										<div class="relative z-10 mr-4">
											<div class="h-16 w-16 overflow-hidden rounded-full border-4 border-primary-500">
												<Image
													src={getAvatar(item.photo)}
													alt={item.name}
													width={80}
													height={80}
													class="h-full w-full object-cover"
												/>
											</div>
										</div>

										{/* 学生姓名 */}
										<h3 class="text-xl font-bold text-neutral-800 dark:text-white">
											{item.name}
										</h3>
									</div>

									{/* 卡片内容 - 使用isolate创建新的层叠上下文，z-10确保内容在水印上方 */}
									<CardBody classes="!p-0 w-full isolate z-10">
										{/* 大学信息 - 左对齐 */}
										<div class="mb-3 pb-2">
											<div class="mb-1 flex items-center text-lg font-semibold text-primary-500 dark:text-primary-400">
												<Icon
													name="fluent:building-bank-16-filled"
													class="mr-1.5 h-4 w-4 flex-shrink-0"
												/>
												<span class="break-words">{item.university}</span>
											</div>
											<div class="pl-5.5 break-words text-xs italic text-neutral-500 dark:text-neutral-400">
												{item.university_en}
											</div>
										</div>

										{/* 专业信息和年份标签 - 左对齐 */}
										<div class="flex flex-col space-y-2">
											<div class="flex w-fit items-center rounded-full bg-neutral-100 px-3 py-1 text-xs text-neutral-600 dark:bg-neutral-600 dark:text-neutral-300">
												<Icon
													name="fluent:calendar-16-filled"
													class="mr-1.5 h-3 w-3 flex-shrink-0"
												/>
												<span>{item.year}</span>
											</div>
											<div class="flex w-fit items-center rounded-full bg-neutral-100 px-3 py-1 text-xs text-neutral-600 dark:bg-neutral-600 dark:text-neutral-300">
												<Icon
													name="fluent:book-16-filled"
													class="mr-1.5 h-3 w-3 flex-shrink-0"
												/>
												<span>{item.major}</span>
											</div>
										</div>
									</CardBody>

									{/* 使用可复用的水印组件 */}
									<LogoWatermark
										logo={eduGrowLogo}
										alt="EduGrow Logo"
									/>
								</div>
							</Card>
						</Col>
					))
				}
			</Row>
		</div>
		<Row>
			<Col span="12" align="center" classes="my-16 max-w-4xl mx-auto">
				<p class="pb-0 text-lg">
					限于篇幅，只展示部分案例，了解更多优秀案例请<Button size='sm' classes='mx-2' modal="contact">咨询</Button>予果予实小助手。
				</p>
			</Col>
		</Row>
	</Section>
	<Testimonial
		bg={testimonialBackground}
		bgPosition="right"
		blockquote="予果予实的老师不仅专业，更像朋友一样陪伴我整个申请过程，让我收获了成长与自信。"
		figcaption="王同学"
		cite="2023年美国本科录取学员"
	/>
	<CTA />
</Layout>

<style>
	/* 案例卡片动画 */
	.case-item {
		transition: all 0.3s ease-out;
	}
</style>

<script>
	// 筛选功能实现
	// 将筛选功能初始化封装为函数，以便在不同事件中调用
	function initializeFilters() {
		// 获取所有筛选按钮和案例项
		const filterBtns = document.querySelectorAll('.filter-btn')
		const caseItems = document.querySelectorAll('.case-item')
		const filterTitle = document.getElementById('filter-title')

		// 当前激活的筛选条件
		let activeFilters = {
			country: 'all',
			major: 'all'
		}

		// 更新标题
		const updateTitle = () => {
			let title = ''

			if (activeFilters.country === 'all' && activeFilters.major === 'all') {
				title = '全部留学案例'
			} else if (activeFilters.country !== 'all' && activeFilters.major === 'all') {
				title = `${activeFilters.country}留学案例`
			} else if (activeFilters.country === 'all' && activeFilters.major !== 'all') {
				title = `${activeFilters.major}专业案例`
			} else {
				title = `${activeFilters.country}${activeFilters.major}专业案例`
			}

			if (filterTitle) {
				filterTitle.textContent = title
			}
		}

		// 筛选案例
		const filterCases = () => {
			caseItems.forEach((item) => {
				if (!(item instanceof HTMLElement)) return

				const country =
					item.className.includes(`data-country-${activeFilters.country}`) ||
					activeFilters.country === 'all'
				const major =
					item.className.includes(`data-major-${activeFilters.major}`) ||
					activeFilters.major === 'all'

				if (country && major) {
					item.style.display = ''
				} else {
					item.style.display = 'none'
				}
			})

			updateTitle()
		}

		// 移除现有的点击事件监听器（避免重复添加）
		filterBtns.forEach((btn) => {
			if (!(btn instanceof HTMLElement)) return
			const newBtn = btn.cloneNode(true)
			if (btn.parentNode) {
				btn.parentNode.replaceChild(newBtn, btn)
			}
		})

		// 重新获取按钮（因为已经替换了原来的按钮）
		const newFilterBtns = document.querySelectorAll('.filter-btn')

		// 为筛选按钮添加点击事件
		newFilterBtns.forEach((btn) => {
			if (!(btn instanceof HTMLElement)) return

			btn.addEventListener('click', () => {
				const filterType = btn.getAttribute('data-filter-type') || ''
				const filterValue = btn.getAttribute('data-filter') || ''

				// 更新激活状态
				document
					.querySelectorAll(`.filter-btn[data-filter-type="${filterType}"]`)
					.forEach((b) => {
						if (b instanceof HTMLElement) {
							b.classList.remove('filter-active')
						}
					})
				btn.classList.add('filter-active')

				// 更新筛选条件
				if (filterType === 'country' || filterType === 'major') {
					activeFilters[filterType] = filterValue
				}

				// 应用筛选
				filterCases()
			})
		})

		// 初始应用筛选（显示所有案例）
		filterCases()
	}

	// 在页面加载完成时初始化筛选功能
	document.addEventListener('DOMContentLoaded', initializeFilters)

	// 在使用 Astro View Transitions 导航到该页面时重新初始化筛选功能
	document.addEventListener('astro:after-swap', initializeFilters)
</script>
