<!-- Scripts for UI components -->
<script defer>
	document.addEventListener('astro:page-load', () => {
		// Menu Dropdown
		const menuItems = document.querySelectorAll('.header__menu-item')
		menuItems.forEach((menuItem) => {
			const submenu = menuItem.querySelector('.header__submenu')
			const link = menuItem.querySelector('.header__menu-link')

			if (submenu && link) {
				link.addEventListener('click', function (event) {
					event.preventDefault()
					menuItem.classList.toggle('open')
				})
			}
		})
		document.addEventListener('click', function (event) {
			const target = event.target

			menuItems.forEach((menuItem) => {
				const submenu = menuItem.querySelector('.header__submenu')
				if (submenu && !menuItem.contains(target)) {
					menuItem.classList.remove('open')
				}
			})
		})

		// Menu toggle
		const headerToggle = document.querySelector('.header__toggle')
		const headerMenu = document.querySelector('.header__menu')
		if (headerToggle && headerMenu) {
			headerToggle.addEventListener('click', () => {
				headerToggle.classList.toggle('header__toggle--open')
				const isExpanded = headerToggle.getAttribute('aria-expanded') === 'true'
				const newExpandedValue = isExpanded ? 'false' : 'true'
				headerToggle.setAttribute('aria-expanded', newExpandedValue)
				headerMenu.classList.toggle('header__menu--open')
			})
		}

		// Modals
		function openModal(modal) {
			if (modal && modal.classList.contains('modal')) {
				modal.classList.add('open')
			}
		}
		function closeModal(modal) {
			if (modal && modal.classList.contains('modal')) {
				modal.classList.remove('open')
			}
		}
		const modalButtons = document.querySelectorAll('[data-modal]')

		modalButtons.forEach(function (button) {
			button.addEventListener('click', function () {
				const modalId = button.getAttribute('data-modal')
				const modal = document.getElementById(modalId)
				openModal(modal)
			})
		})
		document.querySelectorAll('.modal').forEach(function (modal) {
			modal.addEventListener('click', function (event) {
				if (event.target === modal) {
					closeModal(modal)
				}
			})
			const close = modal.querySelector('.modal__close')
			close.addEventListener('click', function (event) {
				event.stopPropagation()
				closeModal(modal)
			})
		})
	})
</script>

<!-- Scroll animations -->
<script defer>
	// 创建一个单一的IntersectionObserver实例
	let observer;

	const initializeObserver = () => {
		// 如果已经初始化过，先断开之前的观察
		if (observer) {
			observer.disconnect();
		}

		// 创建新的观察者
		observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					entry.target.classList.add('scroll-animated')
				}
			})
		}, {
			rootMargin: '0px',
			threshold: 0.1 // 降低阈值以提前触发动画
		});

		// 观察所有元素
		const elements = document.querySelectorAll('.scroll-animation .col')
		elements.forEach((element) => {
			observer.observe(element)
		})
	}

	// 使用一个函数处理所有事件
	const handlePageEvent = () => {
		requestAnimationFrame(initializeObserver);
	};

	// 只在必要的事件上添加监听器
	document.addEventListener('DOMContentLoaded', handlePageEvent);
	document.addEventListener('astro:page-loaded', handlePageEvent);
	document.addEventListener('astro:after-swap', handlePageEvent);
</script>

<!-- Light/Dark mode  -->
<script defer>
	// 立即应用静态主题模式
	if (document.documentElement.classList.contains('mode-dark')) {
		document.documentElement.classList.add('dark');
	} else if (document.documentElement.classList.contains('mode-light')) {
		document.documentElement.classList.remove('dark');
	} else if (document.documentElement.classList.contains('mode-auto')) {
		// 自动主题模式的处理函数
		const applyTheme = () => {
			if (
				localStorage.theme === 'dark' ||
				(!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
			) {
				document.documentElement.classList.add('dark');
			} else {
				document.documentElement.classList.remove('dark');
			}
		};

		// 主题切换器设置
		const setupThemeSwitcher = () => {
			const themeSwitcher = document.getElementById('theme-selector');
			if (themeSwitcher && !themeSwitcher.hasAttribute('data-theme-initialized')) {
				// 标记已初始化，避免重复添加事件监听器
				themeSwitcher.setAttribute('data-theme-initialized', 'true');
				themeSwitcher.addEventListener('click', () => {
					if (localStorage.theme === 'dark') {
						localStorage.theme = 'light';
						document.documentElement.classList.remove('dark');
					} else {
						localStorage.theme = 'dark';
						document.documentElement.classList.add('dark');
					}
				});
			}
		};

		// 统一处理函数
		const handleThemeEvents = () => {
			applyTheme();
			setupThemeSwitcher();
		};

		// 尽早应用主题以避免闪烁
		applyTheme();

		// 事件监听
		document.addEventListener('DOMContentLoaded', handleThemeEvents);
		document.addEventListener('astro:page-loaded', handleThemeEvents);
		document.addEventListener('astro:after-swap', handleThemeEvents);
	}
</script>
