---
// 留学案例滑动卡片组件
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import Card from '../ui/cards/partials/Card.astro';
import CardBody from '../ui/cards/partials/CardBody.astro';
import Row from '../ui/Row.astro';
import Col from '../ui/Col.astro';
import UniversityProof from '../../components/blocks/universityproof/Basic.astro'
import LogoWatermark from '../ui/LogoWatermark.astro';

// UI
import Button from '../ui/Button.astro'
import { Icon } from 'astro-icon/components'

// 从JSON文件导入数据
import studyCasesData from '../../data/json-files/studyCasesData.json';

// 导入水印图片
import eduGrowLogo from '../../assets/logo_white.svg';

// 导入头像图片
import avatar01 from '../../assets/avatars/avatar-01.webp';
import avatar02 from '../../assets/avatars/avatar-02.webp';
import avatar03 from '../../assets/avatars/avatar-03.webp';
import avatar04 from '../../assets/avatars/avatar-04.webp';
import avatar05 from '../../assets/avatars/avatar-05.webp';

// 创建头像映射对象
const avatarMap: Record<string, ImageMetadata> = {
  '/src/assets/avatars/avatar-01.webp': avatar01,
  '/src/assets/avatars/avatar-02.webp': avatar02,
  '/src/assets/avatars/avatar-03.webp': avatar03,
  '/src/assets/avatars/avatar-04.webp': avatar04,
  '/src/assets/avatars/avatar-05.webp': avatar05,
};

// 获取头像的安全函数
function getAvatar(path: string): ImageMetadata {
  if (path in avatarMap) {
    return avatarMap[path];
  }
  // 默认返回第一个头像，避免运行时错误
  return avatar01;
}
---

<div id="studycases" class="mx-auto px-6">
  <Row>
    <Col span="12" align="center" classes="mb-12 max-w-4xl mx-auto">
      <h2 class="text-pretty">成功案例展示，<strong>见证学子们的梦想起航</strong></h2>
      <p class="pb-0 text-lg">
        众多学子通过予果予实的专业指导，成功申请到MIT、哈佛、斯坦福、牛津等世界顶尖学府。每一个案例都是我们用心服务的见证，也是对您未来留学之路的最好承诺。
      </p>
    </Col>
  </Row>
</div>
<UniversityProof classes='!py-0 md:!py-6'/>
<div class="study-case-slider w-full py-6 relative">
  <div class="slider-container overflow-hidden">
    <div class="slider-track flex gap-6 py-6">
      {/* 渲染卡片 */}
      {studyCasesData.map((item) => (
        <div class="slider-item min-w-[280px] max-w-[280px] flex-shrink-0">
          <Card classes="h-full bg-primary-50 hover:bg-primary-100 dark:bg-neutral-800 dark:hover:bg-neutral-700 hover:shadow-lg hover:shadow-neutral-700/10 dark:hover:shadow-neutral-950/20 transition-all duration-300 ease-out transform translate-y-0 scale-100 hover:-translate-y-2 hover:scale-[1.02]">
            <div class="flex flex-col p-6 relative overflow-hidden h-full justify-between">
              {/* 头像与姓名在同一行，左对齐 */}
              <div class="flex items-center mb-4 w-full">
                {/* 学生头像 */}
                <div class="relative z-10 mr-4">
                  <div class="w-16 h-16 rounded-full overflow-hidden border-4 border-primary-500">
                    <Image 
                      src={getAvatar(item.photo)} 
                      alt={item.name} 
                      width={80} 
                      height={80} 
                      class="w-full h-full object-cover" 
                    />
                  </div>
                </div>
                
                {/* 学生姓名 */}
                <h3 class="font-bold text-xl text-neutral-800 dark:text-white">{item.name}</h3>
              </div>
              
              {/* 卡片内容 - 使用isolate创建新的层叠上下文，z-10确保内容在水印上方 */}
              <CardBody classes="!p-0 w-full isolate z-10">
                {/* 大学信息 - 左对齐 */}
                <div class="mb-3 pb-2">
                  <div class="flex items-center text-primary-500 dark:text-primary-400 text-lg font-semibold mb-1">
                    <Icon name="fluent:building-bank-16-filled" class="w-4 h-4 mr-1.5 flex-shrink-0" />
                    <span class="break-words">{item.university}</span>
                  </div>
                  <div class="text-xs text-neutral-500 dark:text-neutral-400 italic break-words pl-5.5">
                    {item.university_en}
                  </div>
                </div>
                
                {/* 专业信息和年份标签 - 左对齐 */}
                <div class="flex flex-col space-y-2">
                  <div class="flex items-center text-xs text-neutral-600 dark:text-neutral-300 bg-neutral-100 dark:bg-neutral-600 rounded-full px-3 py-1 w-fit">
                    <Icon name="fluent:calendar-16-filled" class="w-3 h-3 mr-1.5 flex-shrink-0" />
                    <span>{item.year}</span>
                  </div>
                  <div class="flex items-center text-xs text-neutral-600 dark:text-neutral-300 bg-neutral-100 dark:bg-neutral-600 rounded-full px-3 py-1 w-fit">
                    <Icon name="fluent:book-16-filled" class="w-3 h-3 mr-1.5 flex-shrink-0" />
                    <span>{item.major}</span>
                  </div>
                </div>
              </CardBody>
              
              {/* 使用可复用的水印组件 */}
              <LogoWatermark
                logo={eduGrowLogo}
                alt="EduGrow Logo"
              />
            </div>
          </Card>
        </div>
      ))}
      
      {/* 克隆第一组卡片用于无缝循环 */}
      {studyCasesData.map((item) => (
        <div class="slider-item min-w-[280px] max-w-[280px] flex-shrink-0">
          <Card classes="h-full bg-primary-50 hover:bg-primary-100 dark:bg-neutral-800 dark:hover:bg-neutral-700 hover:shadow-lg hover:shadow-neutral-700/10 dark:hover:shadow-neutral-950/20 transition-all duration-300 ease-out transform translate-y-0 scale-100 hover:-translate-y-2 hover:scale-[1.02]">
            <div class="flex flex-col p-6 relative overflow-hidden h-full justify-between">
              {/* 头像与姓名在同一行，左对齐 */}
              <div class="flex items-center mb-4 w-full">
                {/* 学生头像 */}
                <div class="relative z-10 mr-4">
                  <div class="w-16 h-16 rounded-full overflow-hidden border-4 border-primary-500">
                    <Image 
                      src={getAvatar(item.photo)} 
                      alt={item.name} 
                      width={80} 
                      height={80} 
                      class="w-full h-full object-cover" 
                    />
                  </div>
                </div>
                
                {/* 学生姓名 */}
                <h3 class="font-bold text-xl text-neutral-800 dark:text-white">{item.name}</h3>
              </div>
              
              {/* 卡片内容 */}
              <CardBody classes="!p-0 w-full isolate z-10">
                {/* 大学信息 - 左对齐 */}
                <div class="mb-3 pb-2">
                  <div class="flex items-center text-primary-500 dark:text-primary-400 text-lg font-semibold mb-1">
                    <Icon name="fluent:building-bank-16-filled" class="w-4 h-4 mr-1.5 flex-shrink-0" />
                    <span class="break-words">{item.university}</span>
                  </div>
                  <div class="text-xs text-neutral-500 dark:text-neutral-400 italic break-words pl-5.5">
                    {item.university_en}
                  </div>
                </div>
                
                {/* 专业信息和年份标签 - 左对齐 */}
                <div class="flex flex-col space-y-2">
                  <div class="flex items-center text-xs text-neutral-600 dark:text-neutral-300 bg-neutral-100 dark:bg-neutral-600 rounded-full px-3 py-1 w-fit">
                    <Icon name="fluent:calendar-16-filled" class="w-3 h-3 mr-1.5 flex-shrink-0" />
                    <span>{item.year}</span>
                  </div>
                  <div class="flex items-center text-xs text-neutral-600 dark:text-neutral-300 bg-neutral-100 dark:bg-neutral-600 rounded-full px-3 py-1 w-fit">
                    <Icon name="fluent:book-16-filled" class="w-3 h-3 mr-1.5 flex-shrink-0" />
                    <span>{item.major}</span>
                  </div>
                </div>
              </CardBody>
              
              {/* 使用可复用的水印组件 */}
              <LogoWatermark
                logo={eduGrowLogo}
                alt="EduGrow Logo"
              />
            </div>
          </Card>
        </div>
      ))}
    </div>
  </div>
</div>
<div class="mx-auto px-6">
  <Row>
    <Col span="12" align="center" classes="mb-24 mx-auto">
      <Button size="lg" link="/cases">了解更多</Button>
    </Col>
  </Row>
</div>


<style>
.slider-container {
  position: relative;
  width: 100%;
  overflow: hidden;
}

.slider-track {
  display: flex;
  width: fit-content;
  gap: 1.5rem; /* 卡片间距 */
}

.slider-item {
  flex: 0 0 auto;
  transition: transform 0.3s ease;
}

/* 使用CSS变量来控制动画 */
:root {
  --slider-duration: 40s; /* 调整速度 */
  --card-width: 280px; /* 卡片宽度 */
  --card-gap: 1.5rem; /* 卡片间距 */
  --cards-count: 5; /* 卡片数量 */
}

/* 使用动画实现无限滚动效果 - 关键是使用具体的像素值而不是百分比 */
@keyframes infiniteScroll {
  0% {
    transform: translateX(0);
  }
  100% {
    /* 移动一组卡片的总宽度 */
    transform: translateX(calc(-1 * var(--cards-count) * (var(--card-width) + var(--card-gap))));
  }
}

.slider-track {
  animation: infiniteScroll var(--slider-duration) linear infinite;
  /* 设置transform-style确保3D变换 */
  transform-style: preserve-3d;
  will-change: transform;
}

/* 鼠标悬停时暂停动画 */
.study-case-slider:hover .slider-track {
  animation-play-state: paused;
}

/* 卡片悬停效果 */
.slider-item:hover {
  z-index: 10;
}

/* 响应式设计优化 */
@media (max-width: 768px) {
  :root {
    --card-width: 260px;
    --card-gap: 1rem;
  }
  
  .slider-item {
    min-width: var(--card-width);
    max-width: var(--card-width);
  }
  
  .slider-container {
    padding: 0 1rem;
  }
  
  .slider-track {
    gap: var(--card-gap);
  }
}

/* 更小屏幕的额外优化 */
@media (max-width: 480px) {
  :root {
    --card-width: 240px;
    --card-gap: 0.75rem;
  }
}
</style>

<script>
  // 初始化滑动功能
  function initializeSlider() {
    const sliders = document.querySelectorAll('.study-case-slider');
    
    sliders.forEach(slider => {
      const track = slider.querySelector('.slider-track');
      const items = slider.querySelectorAll('.slider-item');
      const itemCount = items.length / 2; // 除以2因为我们克隆了一组卡片
      
      // 设置CSS变量
      document.documentElement.style.setProperty('--cards-count', itemCount.toString());
      document.documentElement.style.setProperty('--card-width', '280px');
      document.documentElement.style.setProperty('--card-gap', '1.5rem');
      document.documentElement.style.setProperty('--slider-duration', '40s');
      
      // 创建无限滚动效果
      function setupInfiniteScroll() {
        if (!track) return;
        
        // 重置动画
        (track as HTMLElement).style.animation = 'none';
        (track as HTMLElement).offsetHeight; // 强制重绘
        
        // 应用新动画
        (track as HTMLElement).style.animation = 'infiniteScroll var(--slider-duration) linear infinite';
      }
      
      // 处理窗口大小变化
      function handleResize() {
        // 根据屏幕宽度调整卡片宽度和间距
        if (window.innerWidth <= 480) {
          document.documentElement.style.setProperty('--card-width', '240px');
          document.documentElement.style.setProperty('--card-gap', '0.75rem');
        } else if (window.innerWidth <= 768) {
          document.documentElement.style.setProperty('--card-width', '260px');
          document.documentElement.style.setProperty('--card-gap', '1rem');
        } else {
          document.documentElement.style.setProperty('--card-width', '280px');
          document.documentElement.style.setProperty('--card-gap', '1.5rem');
        }
        
        // 重新设置动画
        setupInfiniteScroll();
      }
      
      // 设置初始动画
      setupInfiniteScroll();
      
      // 添加鼠标悬停事件处理
      slider.addEventListener('mouseenter', () => {
        if (track) {
          (track as HTMLElement).style.animationPlayState = 'paused';
        }
      });
      
      slider.addEventListener('mouseleave', () => {
        if (track) {
          (track as HTMLElement).style.animationPlayState = 'running';
        }
      });
      
      // 监听窗口大小变化
      window.addEventListener('resize', handleResize);
      
      // 初始调用一次以设置正确的尺寸
      handleResize();
    });
  }
  
  // 在页面加载和Astro页面转换后初始化滑动功能
  document.addEventListener('DOMContentLoaded', initializeSlider);
  document.addEventListener('astro:page-loaded', initializeSlider);
  document.addEventListener('astro:after-swap', initializeSlider);
  
  // 立即执行初始化
  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    setTimeout(initializeSlider, 1);
  }
</script>