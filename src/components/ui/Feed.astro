---
// Feed
// ------------
// Description: the feed component is a ui element that displays a stream of content (static or dynamic), such as comments, activity updates, posts, in a chronological order.
// Properties:
// - Data: the data of the feed (consists of title, date, text, and image)
// - classes: additional classes

import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import type { ImageMetadata } from 'astro'

// 导入所有服务图片
const serviceImages = import.meta.glob<{ default: ImageMetadata }>('/src/assets/services/*.webp')

// Props
type Props = {
	data: Array<{
		title: string
		stage?: string
		text?: string
		image?: string
		services?: Array<{ text: string; icon: string; description?: string } | string>
	}>
	classes?: string
}
const { data, classes } = Astro.props
---

<ul aria-label="Changelog feed" role="feed" class:list={['feed', { [`${classes}`]: classes }]}>
	{
		data.map((item) => (
			<li role="article" class="feed__item">
				<div class="feed__item-stage-wrapper">
					<span class="feed__item-stage"> {item.title}</span>
				</div>
				<div class="feed__item-container">
					<h4 class="feed__item-header">
						{item.title}
						<span class="text-lg"> / {item.stage}</span>
					</h4>
					{item.image && (
						<div class="feed__item-image">
							{/* 使用动态导入的方式处理图片资源 */}
							{(() => {
								// 获取图片路径的最后部分作为键名
								const imagePath = item.image
								const imageKey = `/src${imagePath.substring(imagePath.indexOf('/assets'))}`
								return serviceImages[imageKey] ? (
									<Image
										src={serviceImages[imageKey]()}
										alt={item.title}
										width={1000}
										height={500}
										class="rounded-xl"
										quality={80}
									/>
								) : (
									<img
										src={item.image}
										alt={item.title}
										width="1000"
										height="500"
									/>
								)
							})()}
						</div>
					)}
					{item.text && <div class="feed__item-text basic-text" set:html={item.text} />}
					{item.services && (
						<div class="feed__item-services">
							{item.services.map((service) => (
								<div class="feed__item-service">
									{typeof service === 'string' ? (
										service
									) : (
										<div class="feed__item-service-content">
											<div class="feed__item-service-header">
												<Icon
													name={service.icon}
													class="feed__item-service-icon"
												/>
												<div class="flex flex-col">
													<span class="feed__item-service-text">
														{service.text}
													</span>
													{service.description && (
														<div class="feed__item-service-description">
															{service.description}
														</div>
													)}
												</div>
											</div>
										</div>
									)}
								</div>
							))}
						</div>
					)}
				</div>
			</li>
		))
	}
</ul>

<style>
	.feed {
		@apply relative flex flex-col gap-24 py-12 pl-6 before:absolute before:left-10 before:top-0 before:h-full before:-translate-x-5 lg:before:translate-x-12 before:border before:border-dashed before:border-neutral-100 after:absolute after:bottom-6 after:left-10 after:top-6 after:-translate-x-5 lg:after:translate-x-12 after:border after:border-neutral-100 before:left-8 after:left-8 lg:before:left-1/3 lg:after:left-1/3 dark:before:border-neutral-800 dark:after:border-neutral-800;
	}
	.feed__item {
		@apply flex gap-6;
	}
	.feed__item-container {
		@apply relative flex flex-1 flex-col pl-6 before:absolute before:-left-[1.1rem] lg:before:left-[0.2rem] before:top-3 before:z-10 before:h-3 before:w-3 before:rounded-full before:bg-primary-500 before:ring-2 before:ring-neutral-100 lg:pl-12 dark:before:ring-neutral-800 [&_p]:m-0;
	}
	.feed__item-stage-wrapper {
		@apply hidden w-full lg:block lg:w-1/3 text-end;
	}
	.feed__item-stage {
		@apply sticky top-48 text-4xl font-bold text-primary-500 z-10;
	}
	.feed__item-header {
		@apply text-2xl font-bold text-primary-500 lg:hidden;
	}
	.feed__item-text {
		@apply max-w-lg font-medium;
	}
	.feed__item-image {
		@apply mb-6 max-w-lg overflow-hidden rounded-xl;
	}
	.feed__item-services {
		@apply mt-6 flex list-none flex-col flex-wrap text-sm;
	}
	.feed__item-service {
		@apply flex flex-col max-w-lg text-neutral-700 dark:text-neutral-300 p-4 hover:bg-primary-50/50 hover:dark:bg-neutral-900 hover:rounded-full transition-all;
	}
	.feed__item-service-content {
		@apply flex flex-col;
	}
	.feed__item-service-header {
		@apply flex items-center;
	}
	.feed__item-service-icon {
		@apply mr-4 text-4xl md:text-5xl;
	}
	.feed__item-service-text {
		@apply font-medium;
	}
	.feed__item-service-description {
		@apply max-w-xs text-xs text-neutral-300 dark:text-neutral-400;
	}
</style>
